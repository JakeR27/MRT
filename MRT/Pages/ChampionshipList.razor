@page "/championships"
@using MRT.Data
@using MRT.Data.ResultModels
@using Microsoft.AspNetCore.WebUtilities
@inject ResultsService ResultsService
@inject NavigationManager NavigationManager

<PageTitle>Championships</PageTitle>

<h1>List of Championships</h1>

<p>This component provide a list of championships that have information recorded in MRT.</p>

@if (organiser != null)
{
    <h2>The following championships are organised by @organiser.Name</h2>
}

@if (championships == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Organiser</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var championship in championships)
            {
                <tr>
                    @* <td>@championship.Id</td> *@
                    <td>@championship.Name</td>
                    <td>@championship.StartDate.ToShortDateString()</td>
                    <td>@championship.EndDate.ToShortDateString()</td>
                    @if (championship.ChampionshipOrganiser == null)
                    {
                        <td>Unknown</td>
                    }
                    else
                    {
                        <td>@championship.ChampionshipOrganiser.Name</td>
                    }
                    <td><a href="events?championshipId=@championship.Id">VIEW EVENTS</a></td>
                    <td><a href="championship?championshipId=@championship.Id">OVERVIEW</a></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid OrganiserId { get; set; }
    
    private Championship[]? championships;
    private Organiser? organiser;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        NavigationManager.LocationChanged += OnLocationChanged;
        
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("organiserId", out var _organiserId))
        {
            OrganiserId = Guid.Parse(_organiserId);
        }
        
        organiser = await ResultsService.GetOrganiserAsync(OrganiserId);
        championships = await ResultsService.GetChampionshipsAsync(organiser);
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }
    
    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        OrganiserId = Guid.Empty;
        await OnInitializedAsync();
        StateHasChanged();
    }
}
