@page "/competitor"
@using MRT.Data
@using MRT.Data.ResultModels
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Server.Kestrel.Core
@inject ResultsService ResultsService
@inject NavigationManager NavigationManager

<PageTitle>Competitor</PageTitle>

<h1>Competitor Overview</h1>

<p>This component provides an overview of an event that has information recorded in MRT.</p>

@if (competitor == null)
{
    @if (parameterProvided == false)
    {
        <p><b>No competitor ID was provided</b></p>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else
{
    <h3>Teams</h3>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var team in teams)
        {
            <tr>
                <td>@team.Name</td>
            </tr>
        }
        </tbody>
    </table>
    <h3>Results</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Start Position</th>
                <th>Finish Position (After Penalties)</th>
                <th>Positions Gained/Lost</th>
                <th>Position Penalties Received</th>
                <th>Event</th>
                <th>Championship</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in results)
            {
                <tr>
                    <td>@result.Competitor?.Name</td>
                    <td>@result.StartPosition</td>
                    <td>@result.FinishOnTrackPosition (@result.FinishOnResultPosition)</td>
                    <td>@(result.StartPosition - result.FinishOnResultPosition)</td>
                    <td>@result.PenaltiesReceived?.Sum(penalty => penalty.PositionPenalty)</td>
                    <td>@result.Race.Event.Name</td>
                    <td><ChampionshipLink Championship="@result.Race.Event.Championship"/></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid CompetitorId { get; set; }

    private bool parameterProvided = true; 
    
    private Competitor? competitor;
    private Team[] teams = new [] { new Team() };
    private Result[] results = new [] { new Result() };

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("competitorId", out var _competitorId))
        {
            CompetitorId = Guid.Parse(_competitorId);
        }

        if (CompetitorId == Guid.Empty)
        {
            parameterProvided = false;
        }

        competitor = await ResultsService.GetCompetitorAsync(CompetitorId);
        results = await ResultsService.GetResultsAsync(competitor);
        teams = await ResultsService.GetTeamsAsync(competitor);
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }
    
}
