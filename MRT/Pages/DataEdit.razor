@page "/dataedit"
@using MRT.Data
@using MRT.Data.ResultModels
@using MRT.Pages.Forms
@using Microsoft.AspNetCore.WebUtilities
@inject ResultsService ResultsService
@inject NavigationManager NavigationManager
<h3>Edit Data</h3>
<hr/>
@if (ResultId != null && ResultRecord != null)
{
    <ResultEditor inputResult="@ResultRecord" teams="@teams" competitors="@competitors" championships="@championships" onSubmitAction="@OnSubmit"/>
}
@if (RaceId != null && RaceRecord != null)
{
    <RaceEditor inputRace="@RaceRecord" championships="@championships" onSubmitAction="@OnSubmit"/>
}
@if (EventId != null && EventRecord != null)
{
    <EventEditor inputEvent="@EventRecord" championships="@championships" locations="@locations" onSubmitAction="@OnSubmit"/>
}


@code {
    Guid? ResultId;
    Result? ResultRecord;

    Guid? RaceId;
    Race? RaceRecord;
    
    Guid? EventId;
    Event? EventRecord;

    List<Team> teams;
    List<Competitor> competitors;
    List<Championship> championships;
    List<Location> locations;

    protected override async Task OnInitializedAsync()
    {
        teams = (await ResultsService.GetTeamsAsync()).ToList();
        competitors = (await ResultsService.GetCompetitorsAsync()).ToList();
        championships = (await ResultsService.GetChampionshipsAsync()).ToList();
        locations = (await ResultsService.GetLocationsAsync()).ToList();
        
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("resultId", out var _resultId))
        {
            ResultId = Guid.Parse(_resultId);
            ResultRecord = await ResultsService.GetResultAsync(ResultId.Value);
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("raceId", out var _raceId))
        {
            RaceId = Guid.Parse(_raceId);
            RaceRecord = await ResultsService.GetRaceAsync(RaceId.Value);
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("eventId", out var _eventId))
        {
            EventId = Guid.Parse(_eventId);
            EventRecord = await ResultsService.GetEventAsync(EventId.Value);
        }

    }

    protected async Task OnSubmit()
    {
        if (ResultId != null)
        {
            PersistService.LoadResults();
        }
        if (EventId != null)
        {
            PersistService.LoadEvents();
        }
        
        await OnInitializedAsync();
        StateHasChanged();
    }
}