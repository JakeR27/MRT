@page "/events"
@using MRT.Data
@using MRT.Data.ResultModels
@using Microsoft.AspNetCore.WebUtilities
@inject ResultsService ResultsService
@inject NavigationManager NavigationManager

<PageTitle>Events</PageTitle>

<h1>List of Events</h1>

<p>This component provides a list of events that have information recorded in MRT.</p>

@if (championship != null || location != null)
{
    <p>Filtering events by:</p>
    <ul>
        @if (championship != null)
        {
            <li>Championship: @championship.Name</li>
        }
        @if (location != null)
        {
            <li>Location: @location.Name</li>
        }
    </ul>
}

@if (events == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Location</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Championship</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ev in events)
            {
                <tr>
                    <td>@ev.Name</td>
                    <td><LocationLink Location="@ev.Location"></LocationLink></td>
                    <td>@ev.StartDate.ToShortDateString()</td>
                    <td>@ev.EndDate.ToShortDateString()</td>
                    @if (championship == null)
                    {
                        <td><ChampionshipLink Championship="@ev.Championship"/></td>
                    }
                    else
                    {
                        <td>@ev.Championship.Name</td>
                    }
                    <td><a href="event?eventId=@ev.Id">OVERVIEW</a></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid ChampionshipId { get; set; }
    public Guid LocationId { get; set; }

    
    private Event[]? events;
    private Championship? championship;
    private Location? location;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        NavigationManager.LocationChanged += OnLocationChanged;
        
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("championshipId", out var _championshipId))
        {
            ChampionshipId = Guid.Parse(_championshipId);
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("locationId", out var _locationId))
        {
            LocationId = Guid.Parse(_locationId);
        }
        
        championship = await ResultsService.GetChampionshipAsync(ChampionshipId);
        location = await ResultsService.GetLocationAsync(LocationId);
        events = await ResultsService.GetEventsAsync(championship, location);
        
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }
    
    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        ChampionshipId = Guid.Empty;
        LocationId = Guid.Empty;
        await OnInitializedAsync();
        StateHasChanged();
    }
    
}
