@using MRT.Data.FormModels
@using MRT.Data

<h3>Edit Event</h3>
<div class="form-group col-xl-6">
    <EditForm Model="@formEvent" OnSubmit="@HandleSubmit">
        <label class="form-text" for="name">Name</label>
        <InputText class="form-control" id="name" @bind-Value="formEvent.Name"/>
    
        <br/>
        <label class="form-text" for="start-date">Start Date</label>
        <InputDate Type="InputDateType.DateTimeLocal" class="form-control" id="start-date" @bind-Value="formEvent.StartDate"/>

        <br/>
        <label class="form-text" for="end-date">End Date</label>
        <InputDate Type="InputDateType.DateTimeLocal" class="form-control" id="end-date" @bind-Value="formEvent.EndDate"/>
    
        <br/>
        <label class="form-text" for="championship-id">Championship</label>
        <InputSelect class="form-select" id="championship-id" @bind-Value="formEvent.ChampionshipId">
            @foreach( var championship in championships)
            {
                <option value="@championship.Id">@championship.Name (@championship.Year)</option>
            }
        </InputSelect>
        
        <br/>
        <label class="form-text" for="location-id">Location</label>
        <InputSelect class="form-select" id="location-id" @bind-Value="formEvent.LocationId">
            @foreach( var location in locations)
            {
                <option value="@location.Id">@location.Name</option>
            }
        </InputSelect>
    
        <br/>
        <button class="btn btn-primary" type="submit">Submit Event</button>
    </EditForm>
    @if (submitStatus)
    {
        <p>Submitted successfully</p>
    }
</div>

@code {
    [Parameter]
    public EventCallback onSubmitAction { get; set; }
    
    [Parameter]
    public List<Data.ResultModels.Championship> championships { get; set; }
    [Parameter]
    public List<Data.ResultModels.Location> locations { get; set; }
    [Parameter]
    public Data.ResultModels.Event inputEvent { get; set; }
    Data.FormModels.Event formEvent;
    
    bool submitStatus = false;

    protected override async Task OnInitializedAsync()
    {
        formEvent = new();
        formEvent.Name = inputEvent.Name;
        formEvent.ChampionshipId = inputEvent.ChampionshipId;
        formEvent.LocationId = inputEvent.LocationId;
        formEvent.StartDate = inputEvent.StartDate;
        formEvent.EndDate = inputEvent.EndDate;
    }

    private async void HandleSubmit()
    {
        submitStatus = PersistService.UpdateEvent(formEvent.ToRecord(inputEvent.Id));

        await onSubmitAction.InvokeAsync();
    }
}