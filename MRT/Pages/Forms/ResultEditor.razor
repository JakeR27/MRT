@using MRT.Data.FormModels
@using MRT.Data
@inject ResultsService ResultsService
@inject IJSRuntime JS

<h3>Edit Result</h3>
<div class="form-group col-xl-8">
    <label class="form-text" for="race-id">Race</label>
    
    <table>
        <thead>
        <tr>
            <th>Championship</th>
            <th></th>
            <th>Event</th>
            <th></th>
            <th>Race</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>
                <InputSelect class="form-select" id="championship-selector" @bind-Value="selectedChampionship">
                    <option value="@Guid.Empty" disabled hidden>CHAMPIONSHIP</option>
                    @foreach (var championship in championships)
                    {
                        <option value="@championship.Id">@championship.Name (@championship.Year)</option>
                    }
                </InputSelect>
            </td>
            <td>
                <button class="btn btn-secondary" type="button" @onclick="ChampionshipSelectionChanged"><span class="oi oi-arrow-right" aria-hidden="true"></span></button>
            </td>
            <td>
                <InputSelect class="form-select" id="event-selector" @onchange="EventSelectionChanged" @bind-Value="selectedEvent">
                    <option value="@Guid.Empty" disabled hidden>EVENT</option>
                    @foreach (var ev in events)
                    {
                        <option value="@ev.Id">@ev.Name (@ev.Location.Name)</option>
                    }
                </InputSelect>
            </td>
            <td>
                <button class="btn btn-secondary" type="button" @onclick="EventSelectionChanged"><span class="oi oi-arrow-right" aria-hidden="true"></span></button>
            </td>
            <td>
                <InputSelect class="form-select" id="race-id" @bind-Value="selectedRace">
                    <option value="@Guid.Empty" disabled hidden>RACE</option>
                    @foreach (var race in races)
                    {
                        <option value="@race.Id">@race.Name - @race.Event.Name (@race.Event.Championship.Name)</option>
                    }
                </InputSelect>
            </td>
        </tr>
        </tbody>
    </table>
    <br/>
    <table>
        <thead>
            <tr>
                <th>Team</th>
                <th>Competitor</th>
                <th>Start Position</th>
                <th>Finish Position (on track)</th>
                <th>Finish Position (after penalties)</th>
                <th>Laptime</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <InputSelect class="form-select" id="team-id" @bind-Value="formResult.TeamId">
                        @foreach (var team in teams)
                        {
                            <option value="@team.Id">@team.Name</option>
                        }
                    </InputSelect>
                </td>
                <td>
                    <InputSelect class="form-select" id="competitor-id" @bind-Value="formResult.CompetitorId">
                        @foreach (var competitor in competitors)
                        {
                            <option value="@competitor.Id">@competitor.Name</option>
                        }
                    </InputSelect>
                </td>
                <td><InputNumber inputmode="numeric" pattern="[0-9]*" class="form-control" id="start-position" @bind-Value="formResult.StartPosition"/></td>
                <td><InputNumber inputmode="numeric" pattern="[0-9]*" class="form-control" id="finish-track" @bind-Value="formResult.FinishOnTrackPosition"/></td>
                <td><InputNumber inputmode="numeric" pattern="[0-9]*" class="form-control" id="finish-result" @bind-Value="formResult.FinishOnResultPosition"/></td>
                <td><InputDate id="laptime" class="form-control" Type="InputDateType.Time" step="0.001" max=00:05:00.000 @bind-Value="formResult.LapTime"/></td>
            </tr>
        </tbody>
    </table>
    <br/>
    <EditForm Model="@formResult" OnSubmit="@HandleSubmit">
        <button class="btn btn-primary" type="submit">Submit Result(s)</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public EventCallback onSubmitAction { get; set; }
    

    [Parameter]
    public List<Data.ResultModels.Team> teams { get; set; }
    [Parameter]
    public List<Data.ResultModels.Competitor> competitors { get; set; }

    [Parameter]
    public Data.ResultModels.Result inputResult { get; set; }

    public Data.FormModels.Result formResult { get; set; } = new();
    
    public List<Data.ResultModels.Race> races { get; set; } = new();
    public List<Data.ResultModels.Event> events { get; set; } = new();
    [Parameter]
    public List<Data.ResultModels.Championship> championships { get; set; }
    
    private Guid selectedChampionship;
    private Guid selectedEvent;
    private Guid selectedRace;
    
    protected override async Task OnInitializedAsync()
    {
        formResult.CompetitorId = inputResult.CompetitorId;
        formResult.TeamId = inputResult.TeamId;
        formResult.LapTime = inputResult.LapTime.GetValueOrDefault();
        formResult.RaceId = inputResult.RaceId;
        formResult.StartPosition = inputResult.StartPosition;
        formResult.FinishOnResultPosition = inputResult.FinishOnResultPosition;
        formResult.FinishOnTrackPosition = inputResult.FinishOnTrackPosition;

        selectedChampionship = inputResult.Race.Event.ChampionshipId;
        ChampionshipSelectionChanged();
        selectedEvent = inputResult.Race.EventId;
        EventSelectionChanged();
        selectedRace = inputResult.RaceId;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        //return base.OnAfterRenderAsync(firstRender);
        JS.InvokeVoidAsync("setTimeInput", "#laptime", formResult.LapTime.ToString("HH\\:mm\\:ss\\.fff"));
        return Task.Delay(0);
    }

    private async void ChampionshipSelectionChanged()
    {
        var championship = await ResultsService.GetChampionshipAsync(selectedChampionship);
        events = (await ResultsService.GetEventsAsync(championship)).ToList();
        selectedEvent = Guid.Empty;
        selectedRace = Guid.Empty;
        StateHasChanged();
    }

    private async void EventSelectionChanged()
    {
        var ev = await ResultsService.GetEventAsync(selectedEvent);
        races = (await ResultsService.GetRacesAsync(ev)).ToList();
        selectedRace = Guid.Empty;
        StateHasChanged();
    }
    
    private async void HandleSubmit()
    {
        if (selectedRace == Guid.Empty)
        {
            return;
        }
        
        formResult.RaceId = selectedRace;
        PersistService.UpdateResult(formResult.ToRecord(inputResult.Id));


        await onSubmitAction.InvokeAsync();
        
    }
}