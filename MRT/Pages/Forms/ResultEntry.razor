@using MRT.Data.FormModels
@using MRT.Data
@inject ResultsService ResultsService

<h3>New Result</h3>
<div class="form-group col-xl-8">
    <label class="form-text" for="race-id">Race</label>
    
    <table>
        <thead>
        <tr>
            <th>Championship</th>
            <th></th>
            <th>Event</th>
            <th></th>
            <th>Race</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>
                <InputSelect class="form-select" id="championship-selector" @bind-Value="selectedChampionship">
                    <option value="@Guid.Empty" disabled hidden>CHAMPIONSHIP</option>
                    @foreach (var championship in championships)
                    {
                        <option value="@championship.Id">@championship.Name (@championship.Year)</option>
                    }
                </InputSelect>
            </td>
            <td>
                <button class="btn btn-secondary" type="button" @onclick="ChampionshipSelectionChanged"><span class="oi oi-arrow-right" aria-hidden="true"></span></button>
            </td>
            <td>
                <InputSelect class="form-select" id="event-selector" @onchange="EventSelectionChanged" @bind-Value="selectedEvent">
                    <option value="@Guid.Empty" disabled hidden>EVENT</option>
                    @foreach (var ev in events)
                    {
                        <option value="@ev.Id">@ev.Name (@ev.Location.Name)</option>
                    }
                </InputSelect>
            </td>
            <td>
                <button class="btn btn-secondary" type="button" @onclick="EventSelectionChanged"><span class="oi oi-arrow-right" aria-hidden="true"></span></button>
            </td>
            <td>
                <InputSelect class="form-select" id="race-id" @bind-Value="selectedRace">
                    <option value="@Guid.Empty" disabled hidden>RACE</option>
                    @foreach (var race in races)
                    {
                        <option value="@race.Id">@race.Name - @race.Event.Name (@race.Event.Championship.Name)</option>
                    }
                </InputSelect>
            </td>
        </tr>
        </tbody>
    </table>
    <br/>
    <table>
        <thead>
            <tr>
                <th>Team</th>
                <th>Competitor</th>
                <th>Start Position</th>
                <th>Finish Position (on track)</th>
                <th>Finish Position (after penalties)</th>
                <th>Laptime</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var tableResult in tableResults)
        {
            <tr>
                <td>
                    <InputSelect class="form-select" id="team-id" @bind-Value="tableResult.TeamId">
                        @foreach (var team in teams)
                        {
                            <option value="@team.Id">@team.Name</option>
                        }
                    </InputSelect>
                </td>
                <td>
                    <InputSelect class="form-select" id="competitor-id" @bind-Value="tableResult.CompetitorId">
                        @foreach (var competitor in competitors)
                        {
                            <option value="@competitor.Id">@competitor.Name</option>
                        }
                    </InputSelect>
                </td>
                <td><InputNumber inputmode="numeric" pattern="[0-9]*" class="form-control" id="start-position" @bind-Value="tableResult.StartPosition"/></td>
                <td><InputNumber inputmode="numeric" pattern="[0-9]*" class="form-control" id="finish-track" @bind-Value="tableResult.FinishOnTrackPosition"/></td>
                <td><InputNumber inputmode="numeric" pattern="[0-9]*" class="form-control" id="finish-result" @bind-Value="tableResult.FinishOnResultPosition"/></td>
                <td><InputDate class="form-control" Type="InputDateType.Time" step="0.001" max=00:05:00.000 @bind-Value="tableResult.LapTime"/></td>
            </tr>
        }
        </tbody>
    </table>
    <br/>
    <EditForm Model="@entry" OnSubmit="@HandleSubmit">
        <button class="btn btn-warning" type="button" @onclick="AddTdyRows">Add TDY Rows</button>
        <button class="btn btn-secondary" type="button" @onclick="AddRow">Add Row</button>
        <button class="btn btn-secondary" type="button" @onclick="RemoveRow">Remove Row</button>
        <button class="btn btn-primary" type="submit">Submit Result(s)</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public EventCallback onSubmitAction { get; set; }
    
    Result entry = new();
    DateTime test = new DateTime();

    List<Result> tableResults = new() {new ()};

    [Parameter]
    public List<Data.ResultModels.Team> teams { get; set; }
    [Parameter]
    public List<Data.ResultModels.Competitor> competitors { get; set; }

    public List<Data.ResultModels.Race> races { get; set; } = new();
    public List<Data.ResultModels.Event> events { get; set; } = new();
    [Parameter]
    public List<Data.ResultModels.Championship> championships { get; set; }
    
    private Guid selectedChampionship;
    private Guid selectedEvent;
    private Guid selectedRace;

    private void AddRow()
    {
        tableResults.Add(new Result());
    }

    private void AddTdyRows()
    {
        tableResults.Clear();
        var tdyTeam = teams.Find(t => t.Name == "TDY");
        for (int i = 1; i < 21; i++)
        {
            tableResults.Add(new Result() {TeamId = tdyTeam.Id, FinishOnTrackPosition = i, FinishOnResultPosition = i});
        }
    }
    
    private void RemoveRow()
    {
        tableResults.RemoveAt(tableResults.Count - 1);
    }

    private async void ChampionshipSelectionChanged()
    {
        var championship = await ResultsService.GetChampionshipAsync(selectedChampionship);
        events = (await ResultsService.GetEventsAsync(championship)).ToList();
        selectedEvent = Guid.Empty;
        selectedRace = Guid.Empty;
        StateHasChanged();
    }

    private async void EventSelectionChanged()
    {
        var ev = await ResultsService.GetEventAsync(selectedEvent);
        races = (await ResultsService.GetRacesAsync(ev)).ToList();
        selectedRace = Guid.Empty;
        StateHasChanged();
    }
    
    private async void HandleSubmit()
    {
        // var record = entry.ToRecord();
        // entry.StartPosition = 0;
        // entry.FinishOnTrackPosition = 0;
        // entry.FinishOnResultPosition = 0;
        // entry.RaceId = Guid.Empty;
        // entry.CompetitorId = Guid.Empty;
        // entry.TeamId = Guid.Empty;

        if (selectedRace == Guid.Empty)
        {
            return;
        }
        
        foreach (var tableResult in tableResults)
        {
            tableResult.RaceId = selectedRace;
            PersistService.AddResult(tableResult.ToRecord());
        }
        tableResults.Clear();

    //PersistService.AddResult(record);
        
        await onSubmitAction.InvokeAsync();
        
    }
}