@page "/location"
@using MRT.Data
@using MRT.Data.ResultModels
@using Microsoft.AspNetCore.WebUtilities
@inject ResultsService ResultsService
@inject NavigationManager NavigationManager

<PageTitle>Location</PageTitle>

<h1>Location Overview</h1>

<p>This component provides an overview of a location that has information recorded in MRT.</p>

@if (location == null)
{
    @if (parameterProvided == false)
    {
        <p><b>No location ID was provided</b></p>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Address</th>
        </tr>
        </thead>
        <tbody>
            <tr>
                <td>@location.Name</td>
                <td>@location.Address</td>
            </tr>
        </tbody>
    </table>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Location</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Organiser</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var ev in events)
        {
            <tr>
                <td>@ev.Name</td>
                <td>@ev.Location.Name</td>
                <td>@ev.StartDate.ToShortDateString()</td>
                <td>@ev.EndDate.ToShortDateString()</td>
                <td><ChampionshipLink Championship="@ev.Championship"/></td>
                <td><a href="event?eventId=@ev.Id">OVERVIEW</a></td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid EventId { get; set; }

    private bool parameterProvided = true; 
    
    private Location? location;
    private Event[] events;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("locationId", out var _locationId))
        {
            EventId = Guid.Parse(_locationId);
        }

        if (EventId == Guid.Empty)
        {
            parameterProvided = false;
        }
        
        location = await ResultsService.GetLocationAsync(EventId);
        events = await ResultsService.GetEventsAsync(location);
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }
    
}
