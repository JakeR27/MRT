@using MRT.Data.ResultModels
@using MRT.Data
@inject ResultsService ResultsService

<table class="table">
    <thead>
    <tr>
        <th>Competitor</th>
        @foreach (var ev in championshipEvents)
        {
            <th>
                @ev.Name
                @ev.Id
            </th>
        }
    </tr>
    </thead>
    <tbody>
    @foreach (var competitor in competitorEventPoints)
        {
            <tr>
                <td>@ResultsService.GetCompetitorAsync(competitor.Key).Result?.Name</td>
                @foreach (var ev in championshipEvents)
                {
                    <td>
                        @CompetitorEventPoints(competitor.Value, ev.Id)
                        @ev.Id
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Competitor> competitors { get; set; }
    private List<Event> championshipEvents { get; set; }

    private Dictionary<Guid, List<int>> competitorPoints { get; set; } = new();

    private Dictionary<Guid, Dictionary<Guid, int>> competitorEventPoints { get; set; } = new();

    private int CompetitorEventPoints(Dictionary<Guid,int> eventPoints, Guid eventId)
    {
        var evPoints = -1;
        if (eventPoints.TryGetValue(eventId, out var points))
        {
            evPoints = points;
        }
        return evPoints;
    }

    [Parameter] 
    public Championship championship { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        championshipEvents = (await ResultsService.GetEventsAsync(championship)).ToList();
        competitors = (await ResultsService.GetCompetitorsAsync()).ToList();

        foreach (var championshipEvent in championshipEvents)
        {
            //find all the races in this event
            var championshipRaces = await ResultsService.GetRacesAsync(championshipEvent);

            foreach (var championshipRace in championshipRaces)
            {
                //find all the results in this race
                var raceResults = await ResultsService.GetResultsAsync(championshipRace);
                foreach (var championshipResult in raceResults)
                {
                    var additionalCompetitorPoints = championshipRace.IndividualPointsOffered;
                    if (additionalCompetitorPoints != 0)
                    {
                        additionalCompetitorPoints -= championshipResult.FinishOnResultPosition;
                    } 
                    
                    if (competitorEventPoints.TryGetValue(championshipResult.CompetitorId, out var competitorPoints))
                    {
                        if (competitorPoints.TryGetValue(championshipEvent.Id, out var points))
                        {
                            points += additionalCompetitorPoints;
                        }
                        else
                        {
                            competitorPoints.Add(championshipEvent.Id, additionalCompetitorPoints);
                        }
                    }
                    else
                    {
                        var newEventPointsDict = new Dictionary<Guid, int>();
                        competitorEventPoints.Add(championshipResult.CompetitorId, newEventPointsDict);
                    }
                }
            }
        }
        
    }

}