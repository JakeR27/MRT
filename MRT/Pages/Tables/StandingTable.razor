@using MRT.Data.ResultModels
@using MRT.Data
@using MRT.Pages.Links
@inject ResultsService ResultsService

<table class="table">
    <thead>
    <tr>
        <th>Competitor</th>
        @foreach (var ev in championshipEvents)
        {
            <th>
                <EventLink ev="ev"></EventLink>
                @* @ev.Id *@
            </th>
        }
        <th>Sum</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var competitor in competitorPointsSum.OrderByDescending(key=>key.Value))
        {
            <tr>
                <td>
                    <CompetitorLink Competitor="@ResultsService.GetCompetitorAsync(competitor.Key).Result"/>
                </td>
                @foreach (var ev in championshipEvents)
                {
                    <td>
                        @PointsFormat(CompetitorEventPoints(competitorEventPoints[competitor.Key], ev.Id))
                        @* @ev.Id *@
                    </td>
                }
                <td>@PointsFormat(CompetitorPointsSum(competitor.Key))</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Competitor> competitors { get; set; }
    private List<Event> championshipEvents { get; set; }

    private Dictionary<Guid, List<int>> competitorPoints { get; set; } = new();

    // key: competitorId, value: dictionary of event points, key: eventId, value: points
    private Dictionary<Guid, Dictionary<Guid, int>> competitorEventPoints { get; set; } = new();
    
    private Dictionary<Guid, int> competitorPointsSum { get; set; } = new();

    private string PointsFormat(int points) => points == -1 ? "-" : points.ToString();
    
    private int CompetitorEventPoints(Dictionary<Guid,int> eventPoints, Guid eventId)
    {
        var evPoints = -1;
        if (eventPoints.TryGetValue(eventId, out var points))
        {
            evPoints = points;
        }
        return evPoints;
    }
    
    private int CompetitorPointsSum(Guid competitorId)
    {
        var sum = -1;
        if (competitorPointsSum.TryGetValue(competitorId, out var points))
        {
            sum = points;
        }
        return sum;
    }

    [Parameter] 
    public Championship championship { get; set; }

    protected override async Task OnInitializedAsync()
    {
        championshipEvents = (await ResultsService.GetEventsAsync(championship)).ToList();
        competitors = (await ResultsService.GetCompetitorsAsync()).ToList();

        foreach (var championshipEvent in championshipEvents)
        {
            //find all the races in this event
            var championshipRaces = await ResultsService.GetRacesAsync(championshipEvent);

            foreach (var championshipRace in championshipRaces)
            {
                //find all the results in this race
                var raceResults = await ResultsService.GetResultsAsync(championshipRace);
                foreach (var championshipResult in raceResults)
                {
                    var additionalCompetitorPoints = championshipRace.IndividualPointsOffered;
                    if (additionalCompetitorPoints != 0)
                    {
                        additionalCompetitorPoints -= championshipResult.FinishOnResultPosition;
                        additionalCompetitorPoints += 1; // 1st place should have 0 points taken, 2nd only 1 point taken etc.
                    } 
                    //prevent negative points
                    if (additionalCompetitorPoints < 0)
                    {
                        additionalCompetitorPoints = 0;
                    }
                    
                    // make sure there is a dictionary to record points for this competitor
                    if (competitorEventPoints.TryGetValue(championshipResult.CompetitorId, out var competitorPoints))
                    {
                        
                    }
                    else
                    {
                        var newEventPointsDict = new Dictionary<Guid, int>();
                        competitorEventPoints.Add(championshipResult.CompetitorId, newEventPointsDict);
                    }

                    // add points gained at this event to dictionary
                    if (competitorEventPoints[championshipResult.CompetitorId].TryGetValue(championshipEvent.Id, out var points))
                    {
                        competitorEventPoints[championshipResult.CompetitorId][championshipEvent.Id] += additionalCompetitorPoints;
                    }
                    else
                    {
                        competitorEventPoints[championshipResult.CompetitorId].Add(championshipEvent.Id, additionalCompetitorPoints);
                    }
                    
                    // add event points to sum
                    if (competitorPointsSum.TryGetValue(championshipResult.CompetitorId, out var sum))
                    {
                        competitorPointsSum[championshipResult.CompetitorId] += additionalCompetitorPoints;
                    }
                    else
                    {
                        competitorPointsSum.Add(championshipResult.CompetitorId, additionalCompetitorPoints);
                    }
                }
            }
        }
        
    }

}